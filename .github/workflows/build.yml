# Este workflow automatiza o processo de build do plugin.
# - Em cada push para a branch 'main', ele compila um .jar de desenvolvimento.
# - Ao criar uma tag (ex: v1.0.4), ele compila e cria um Release oficial no GitHub.
name: Java CI with Maven

on:
  push:
    branches:
      - 'main'
    tags:
      - 'v*'

jobs:
  build-and-release:
    # Usa a versão mais recente do Ubuntu para executar o job
    runs-on: ubuntu-latest
    # Concede permissões para a action criar um release
    permissions:
      contents: write

    steps:
      # Passo 1: Faz o checkout do código do repositório
      - name: Checkout code
        uses: actions/checkout@v4

      # Passo 2: Configura o JDK 17 (Temurin), conforme especificado na sua documentação
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven' # Adiciona cache para as dependências do Maven, acelerando os builds

      # Passo 3: Compila o projeto com o Maven, criando o arquivo .jar
      # A versão é passada dinamicamente usando o número da execução do workflow (ex: 1.0.4, 1.0.5, etc)
      # Para tags, a versão é extraída da tag (ex: v1.1.0 -> 1.1.0)
      - name: Build with Maven
        run: |
          VERSION_STRING=""
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION_STRING="${{ github.ref_name }}"
            VERSION_STRING="${VERSION_STRING:1}" # Remove the 'v' prefix from tag name (e.g., v1.1.0 -> 1.1.0)
          else
            VERSION_STRING="1.0.${{ github.run_number }}" # For development builds, use 1.0.X where X is the run number
          fi
          echo "Building with version: $VERSION_STRING"
          mvn clean package -Dproject.version.full="$VERSION_STRING" --file pom.xml

      # Passo 4: Se o gatilho foi uma tag, cria um Release no GitHub
      - name: Create Release and Upload Artifact
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          # Usa um wildcard para encontrar o .jar, evitando erros quando a versão muda
          files: target/*.jar

      # Passo 5: Se o gatilho foi um push na 'main', anexa o .jar como um artefato do build
      - name: Upload Development Artifact
        if: "!startsWith(github.ref, 'refs/tags/')"
        uses: actions/upload-artifact@v4
        with:
          name: GodMode-MCtrilhas-dev
          path: target/GodMode-MCtrilhas.jar
